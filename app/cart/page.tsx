"use client";
import { useEffect, useState } from 'react';
import { Button, Card, CardBody, CardHeader, Image, Input, Radio, RadioGroup, Textarea } from '@nextui-org/react';
import { CartPlusIcon, DeleteIcon, DeliverytIcon, OrderplustIcon, RestaurantIcon } from '@/components/icons';
import { useRouter } from 'next/navigation';

interface MenuItem {
  title: string;
  img: string;
  svg?: string;
  timer: string;
  calories: string;
  price: number | string;
  quantity: number;
}

export default function Cart() {
  const [cartItems, setCartItems] = useState<MenuItem[]>([]);
  const [isLoading, setIsLoading] = useState(true);
  const [name, setName] = useState('');
  const [phone, setPhone] = useState('');
  const [address, setAddress] = useState('');
  const [comment, setComment] = useState('');
  const [pickupComment, setPickupComment] = useState(''); // –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–ª—è —Å–∞–º–æ–≤—ã–≤–æ–∑–∞
  const [activeTab, setActiveTab] = useState<string>('pickup');
  const [paymentMethod, setPaymentMethod] = useState<string>(''); // –ß—Ç–æ–±—ã —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã
  const [isNameInvalid, setIsNameInvalid] = useState(false);
  const [isPhoneInvalid, setIsPhoneInvalid] = useState(false);
  const [isAddressInvalid, setIsAddressInvalid] = useState(false);
  const [isPaymentMethodInvalid, setIsPaymentMethodInvalid] = useState(false); // –î–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ä–∞–¥–∏–æ-–∫–Ω–æ–ø–æ–∫
  const router = useRouter();

  const handleClick = () => {
    router.push('/');
  };

  useEffect(() => {
    const storedItems = localStorage.getItem('cart');
    const storedTab = localStorage.getItem('activeTab');
    if (storedItems) {
      setCartItems(JSON.parse(storedItems));
    }
    if (storedTab) {
      setActiveTab(storedTab);
    }
    setIsLoading(false);
  }, []);

  const updateQuantity = (index: number, delta: number) => {
    const updatedItems = [...cartItems];
    const currentQuantity = updatedItems[index].quantity;
    const newQuantity = currentQuantity + delta;

    if (newQuantity <= 0) {
      updatedItems.splice(index, 1);
    } else if (newQuantity > 9) {
      updatedItems[index].quantity = 9;
    } else {
      updatedItems[index].quantity = newQuantity;
    }

    setCartItems(updatedItems);
    localStorage.setItem('cart', JSON.stringify(updatedItems));
  };

  const clearCart = () => {
    setCartItems([]);
    localStorage.removeItem('cart');
  };

  const calculateTotalCost = () => {
    return cartItems.reduce((total, cartItem) => {
      let price: number;
      if (typeof cartItem.price === 'number') {
        price = cartItem.price;
      } else if (typeof cartItem.price === 'string') {
        price = parseFloat(cartItem.price.replace(/[^\d.-]/g, ''));
      } else {
        price = 0;
      }
      return total + price * cartItem.quantity;
    }, 0);
  };

  const totalCost = calculateTotalCost();
  const itemCount = cartItems.length;

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault(); // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é –æ—Ç–ø—Ä–∞–≤–∫—É —Ñ–æ—Ä–º—ã

    // –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ—à–∏–±–æ–∫
    setIsNameInvalid(false);
    setIsPhoneInvalid(false);
    setIsAddressInvalid(false);
    setIsPaymentMethodInvalid(false);

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ—Å—Ç–∏ –ø–æ–ª–µ–π
    const isNameEmpty = name.trim() === '';
    const isPhoneEmpty = phone.trim() === '';
    const isAddressEmpty = activeTab === 'delivery' && address.trim() === '';
    const isPaymentMethodEmpty = activeTab === 'delivery' && paymentMethod.trim() === '';

    // –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ—à–∏–±–æ–∫
    setIsNameInvalid(isNameEmpty);
    setIsPhoneInvalid(isPhoneEmpty);
    setIsAddressInvalid(isAddressEmpty);
    setIsPaymentMethodInvalid(isPaymentMethodEmpty);

    // –ï—Å–ª–∏ –µ—Å—Ç—å –æ—à–∏–±–∫–∏, –ø—Ä–µ—Ä–≤–∞—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É
    if (isNameEmpty || isPhoneEmpty || (activeTab === 'delivery' && (isAddressEmpty || isPaymentMethodEmpty))) {
        console.log('–§–æ—Ä–º–∞ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∏–∑-–∑–∞ –æ—à–∏–±–æ–∫ –≤–∞–ª–∏–¥–∞—Ü–∏–∏');
        return;
    }

    // –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ —Å–µ—Ä–≤–µ—Ä
    try {
        const response = await fetch('http://localhost:3001/api/send-order', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                name,
                phone,
                address,
                comment,
                pickupComment,
                paymentMethod,
            }),
        });

        if (response.ok) {
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞
            console.log('–ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω');
            clearCart(); // –û—á–∏—Å—Ç–∫–∞ –∫–æ—Ä–∑–∏–Ω—ã –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
            alert('–í–∞—à –∑–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!'); // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        } else {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–∫–∞–∑–∞:', response.statusText);
            alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–∫–∞–∑–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–∫–∞–∑–∞:', error);
        alert('–ü—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–∫–∞–∑–∞ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
    }
};
  return (
    <div className="flex flex-col gap-3">
      {isLoading ? (
        <p className="text-center">üòä –°–º–æ—Ç—Ä–∏–º –∫–æ—Ä–∑–∏–Ω—É</p>
      ) : cartItems.length > 0 ? (
        <form onSubmit={handleSubmit} className="flex flex-col gap-4">
          <Card className="bg-transparent !p-0">
            <CardBody className='!p-0'>
              <h4 className="font-bold text-lg pb-3">
                –í –∫–æ—Ä–∑–∏–Ω–µ <br />
                {itemCount}{" "}
                {itemCount === 1 ? "–±–ª—é–¥–æ" :
                itemCount >= 2 && itemCount <= 4 ? "–±–ª—é–¥–∞" :
                "–±–ª—é–¥"} –Ω–∞ ‚ÇΩ{totalCost.toFixed(0)}
              </h4>
            </CardBody>
          </Card>
          {cartItems.map((cartItem, index) => (
            <Card key={index} className='mx-1'>
              <CardHeader className="justify-between gap-2">
                <div className="flex gap-2">
                  <Image
                    height={60}
                    width={60}
                    radius="sm"
                    alt={cartItem.title}
                    className="object-contain h-[200px]"
                    src={cartItem.img}
                  />
                  <div className="flex flex-col gap-1 items-start justify-center">
                    <h4 className="text-small font-semibold leading-none text-default-600 text-left">{cartItem.title}</h4>
                    <p className="text-md pt-2 font-bold text-default-500">‚ÇΩ{(parseFloat(String(cartItem.price)) * cartItem.quantity).toFixed(0)}</p>
                  </div>
                </div>
                <div className="flex items-center gap-2">
                  <Button className='min-w-min' variant="flat" onClick={() => updateQuantity(index, -1)}>‚Äì</Button>
                  <span>{cartItem.quantity}</span>
                  <Button className='min-w-min' variant="flat" onClick={() => updateQuantity(index, 1)}>+</Button>
                </div>
              </CardHeader>
            </Card>
          ))}

          <div className='text-center'>
            <Button startContent={<DeleteIcon />} className="w-max" color="danger" variant="light" onClick={clearCart}>–û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É</Button>
          </div>
          <p className="flex justify-between font-bold mx-1">
            <span className='font-bold'>–ò—Ç–æ–≥–æ:</span> ‚ÇΩ{totalCost.toFixed(0)}
          </p>

          <p className='font-bold mx-1 pt-3'>–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –ø–æ–ª—É—á–µ–Ω–∏—è</p>
          <div className="flex gap-2">
            <Button 
              onClick={() => {
                setActiveTab('pickup');
                localStorage.setItem('activeTab', 'pickup');
                setPaymentMethod(''); // –°–±—Ä–æ—Å–∏—Ç—å –≤—ã–±–æ—Ä —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã
              }} 
              startContent={<RestaurantIcon />}
              color={activeTab === 'pickup' ? 'success' : 'default'}
              variant={activeTab === 'pickup' ? 'solid' : 'light'}
              className='rounded-full'
            >
              –°–∞–º–æ–≤—ã–≤–æ–∑
            </Button>
            <Button 
              onClick={() => {
                setActiveTab('delivery');
                localStorage.setItem('activeTab', 'delivery');
              }} 
              startContent={<DeliverytIcon />}
              color={activeTab === 'delivery' ? 'success' : 'default'}
              variant={activeTab === 'delivery' ? 'solid' : 'light'}
              className='rounded-full'
            >
              –î–æ—Å—Ç–∞–≤–∫–∞
            </Button>
          </div>

          {activeTab === 'pickup' ? (
            <Card className='py-0'>
              <CardBody className='gap-2'>
                <Input
                  label="–í–∞—à–µ –∏–º—è"
                  value={name}
                  onChange={(e) => {
                    setName(e.target.value);
                    setIsNameInvalid(false); // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É, –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞—á–∏–Ω–∞–µ—Ç –≤–≤–æ–¥–∏—Ç—å —Ç–µ–∫—Å—Ç
                  }}
                  isRequired
                  variant="bordered"
                  errorMessage={isNameInvalid ? "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è" : ""}
                  isInvalid={isNameInvalid}
                />
                <Input
                  label="–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞"
                  value={phone}
                  onChange={(e) => {
                    setPhone(e.target.value);
                    setIsPhoneInvalid(false); // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É
                  }}
                  variant="bordered"
                  type="tel"
                  isRequired
                  errorMessage={isPhoneInvalid ? "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞" : ""}
                  isInvalid={isPhoneInvalid}
                />
                <Textarea
                  label="–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π"
                  value={pickupComment}
                  onChange={(e) => setPickupComment(e.target.value)}
                  variant="bordered"
                  rows={3}
                />
              </CardBody>
            </Card>
          ) : (
            <Card className='py-0'>
              <CardBody className='gap-2'>
                <Input
                  label="–í–∞—à–µ –∏–º—è"
                  value={name}
                  onChange={(e) => {
                    setName(e.target.value);
                    setIsNameInvalid(false); // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É
                  }}
                  isRequired
                  variant="bordered"
                  errorMessage={isNameInvalid ? "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è" : ""}
                  isInvalid={isNameInvalid}
                />
                <Input
                  label="–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞"
                  value={phone}
                  onChange={(e) => {
                    setPhone(e.target.value);
                    setIsPhoneInvalid(false); // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É
                  }}
                  variant="bordered"
                  type="tel"
                  isRequired
                  errorMessage={isPhoneInvalid ? "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞" : ""}
                  isInvalid={isPhoneInvalid}
                />
                <Input
                  label="–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏"
                  value={address}
                  onChange={(e) => {
                    setAddress(e.target.value);
                    setIsAddressInvalid(false); // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É
                  }}
                  variant="bordered"
                  type="text"
                  isRequired
                  errorMessage={isAddressInvalid ? "–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏" : ""}
                  isInvalid={isAddressInvalid}
                />
                <Textarea
                  label="–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π"
                  value={comment}
                  onChange={(e) => setComment(e.target.value)}
                  variant="bordered"
                  rows={3}
                />
              </CardBody>
            </Card>
          )}
          
          {activeTab === 'delivery' && ( // –£—Å–ª–æ–≤–∏–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è RadioGroup —Ç–æ–ª—å–∫–æ –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏
            <>
              <p className='font-bold mx-1 pt-3'>–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã</p>
              <RadioGroup 
                value={paymentMethod}
                color="success" 
                onChange={(e) => {
                  setPaymentMethod(e.target.value);  // –ò–∑–≤–ª–µ–∫–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ —Å–æ–±—ã—Ç–∏—è
                  setIsPaymentMethodInvalid(false);   // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –ø—Ä–∏ –≤—ã–±–æ—Ä–µ
                }}
            >
                <Radio value="online" isInvalid={isPaymentMethodInvalid && paymentMethod === ''}>
                  –û–Ω–ª–∞–π–Ω-–æ–ø–ª–∞—Ç–∞
                </Radio>
                <Radio value="cash" isInvalid={isPaymentMethodInvalid && paymentMethod === ''}>
                  –ù–∞–ª–∏—á–Ω—ã–º–∏ –∫—É—Ä—å–µ—Ä—É
                </Radio>
                <Radio value="transfer" isInvalid={isPaymentMethodInvalid && paymentMethod === ''}>
                  –ü–µ—Ä–µ–≤–æ–¥–æ–º –Ω–∞ –∫–∞—Ä—Ç—É
                </Radio>
                </RadioGroup>
              {isPaymentMethodInvalid && (
                <p className="text-[#f31260]">–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã.</p>
              )}
            </>
          )}
            <div className='text-center sticky bottom-[90px]'><Button startContent={<OrderplustIcon/>} type="submit" variant='shadow' color="success" className="w-min font-normal rounded-full">–°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑</Button></div>
        
        </form>
      ) : (
        <p className='text-center grid justify-items-center h-full w-full left-0 absolute content-center top-0'>
          <CartPlusIcon className='mb-3'/>
          –ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞! –î–æ–±–∞–≤—å—Ç–µ –±–ª—é–¥–∞, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –∏—Ö –∑–¥–µ—Å—å.
          <Button className='mt-5' onClick={handleClick} color="success" variant="ghost">
            –ü–µ—Ä–µ–π—Ç–∏ –≤ –º–µ–Ω—é
          </Button>
        </p>
      )}
    </div>
  );
}
